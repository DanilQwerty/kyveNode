#!/bin/bash

exists()
{
  command -v "$1" >/dev/null 2>&1
}

if exists wget; then
echo ''
else
  sudo apt update && sudo apt install wget -y < "/dev/null"
fi

if exists unzip; then
echo ''
else 
  sudo apt update && sudo apt install unzip -y < "/dev/null"
fi
 
if exists jq; then
echo ''
else
  sudo apt update && sudo apt install jq -y < "/dev/null"
fi

echo -e 'list of pools:'
echo -e '0 - moonbeam; 1 - avalanche; 2 - stacks; 3 - bitcoin;'
echo -e '4 - solana; 5 - ziliqa; 6 - near; 7 - celo;'
echo -e '8 - evmos evm; 9 - cosmos; 10 - injective; 11 - evmos cosmos;'
echo -e '12 - axelar; 13- aurora; 14 - cronos; 15 - terra;'
echo -e '16 - umee; 17 - polkadot; 18 - kusama;'

echo -n "Enter pool id ->"
read VAR

if [[ $VAR == 0 ]]
then
  POOL=0 && REP_NAME="evm" && BIN="kyve-evm" && NAME="moonbeam" && EVM=true
elif [[ $VAR == 1 ]]
then
  POOL=1 && REP_NAME="evm" && BIN="kyve-evm" && NAME="avalanche"
elif [[ $VAR == 2 ]]
then
  POOL=2 && REP_NAME="stacks" && BIN="kyve-stx" && NAME="stacks"
elif [[ $VAR == 3 ]]
then
  POOL=3 && REP_NAME="bitcoin" && BIN="kyve-btc" && NAME="bitcoin"
elif [[ $VAR == 4 ]]
then
  POOL=4 && REP_NAME="solana" && BIN="kyve-sol" && NAME="solana"
elif [[ $VAR == 5 ]]
then
  POOL=5 && REP_NAME="zilliqa" && BIN="kyve-zil" && NAME="zilliqa"
elif [[ $VAR == 6 ]]
then
  POOL=6 && REP_NAME="near" && BIN="kyve-near" && NAME="near"
elif [[ $VAR == 7 ]]
then
  POOL=7 && REP_NAME="celo" && BIN="kyve-celo" && NAME="celo"
elif [[ $VAR == 8 ]]
then
  POOL=8 && REP_NAME="evm" && BIN="kyve-evm" && NAME="evmos evm"
elif [[ $VAR == 9 ]]
then
  POOL=9 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="cosmos"
elif [[ $VAR == 10 ]]
then
  POOL=10 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="injective"
elif [[ $VAR == 11 ]]
then
  POOL=11 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="evmos cosmos"
elif [[ $VAR == 12 ]]
then
  POOL=12 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="axelar"
elif [[ $VAR == 13 ]]
then
  POOL=13 && REP_NAME="evm" && BIN="kyve-evm" && NAME="aurora"
elif [[ $VAR == 14 ]]
then
  POOL=14 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="cronos"
elif [[ $VAR == 15 ]]
then
  POOL=15 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="terra"
elif [[ $VAR == 16 ]]
then
  POOL=16 && REP_NAME="cosmos" && BIN="kyve-cosmos" && NAME="umee"
elif [[ $VAR == 17 ]]
then
  POOL=17 && REP_NAME="substrate" && BIN="kyve-substrate" && NAME="polkadot"
elif [[ $VAR == 18 ]]
then
  POOL=18 && REP_NAME="substrate" && BIN="kyve-substrate" && NAME="kusama"
fi

if[[$REP_NAME == "evm"]]
then
	VER=$(wget -qO- https://api.github.com/repos/kyve-org/${REP_NAME}/releases/tag/v1.2.0 | jq -r ".tag_name") && \
	wget https://github.com/kyve-org/${REP_NAME}/releases/download/v1.2.0/kyve-linux.zip && \
	unzip kyve-linux.zip && \
	rm -Rvf kyve-linux.zip __MACOSX && \
	chmod u+x kyve-linux && \
	mv kyve-linux /usr/bin/${BIN} && \
	printf "\n\
	pool_name >>> ${NAME}.\n\
	pool__num >>> #${POOL}.\n\
	bin__name >>> ${BIN}.\n\
	bin___ver >>> v$(${BIN} --version).\n\n"
else
	VER=$(wget -qO- https://api.github.com/repos/kyve-org/${REP_NAME}/releases/tag/v0.2.0 | jq -r ".tag_name") && \
	wget https://github.com/kyve-org/${REP_NAME}/releases/download/v0.2.0/kyve-linux.zip && \
	unzip kyve-linux.zip && \
	rm -Rvf kyve-linux.zip __MACOSX && \
	chmod u+x kyve-linux && \
	mv kyve-linux /usr/bin/${BIN} && \
	printf "\n\
	pool_name >>> ${NAME}.\n\
	pool__num >>> #${POOL}.\n\
	bin__name >>> ${BIN}.\n\
	bin___ver >>> v$(${BIN} --version).\n\n"
fi

read -p "Input you stake ->" STAKE
echo 'export STAKE='\"${STAKE}\" >> $HOME/.bash_profile
read -p "Paste your mnemonic ->" MNEMONIC
echo 'export MNEMONIC='\"${MNEMONIC}\" >> $HOME/.bash_profile

sudo tee <<EOF >/dev/null /etc/systemd/system/kyved.service
[Unit]
Description=Kyve Node
After=network.target
[Service]
Type=simple
User=$USER
ExecStart=$(which $BIN) \\
--poolId $POOL \\
--mnemonic "$MNEMONIC" \\
--initialStake $STAKE \\
--keyfile /root/arweave.json \\
--network korellia \\
--space 30000000000 \\
--verbose
Restart=on-failure
RestartSec=10
LimitNOFILE=10000
[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload && \
sudo systemctl enable kyved && \
sudo systemctl restart kyved
rm -f $HOME/run_node
